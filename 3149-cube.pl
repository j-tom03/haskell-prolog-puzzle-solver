generator4( X ) :-
    all_l4_primes( PS4 ),
    all_l3_primes( PS3 ),
    all_l2_primes( PS2 ),
    all_l1_primes( PS1 ),
    permutation( [9,8,7,6,5,4,3,2,1,0], NS ),
    \+ NS = [0|_],
    get_prime_runs( NS, PS4, PS3, PS2, PS1, X ).

get_prime_runs( [], _,_,_,_, [] ).
get_prime_runs( [N1,N2,N3,N4|NS], X4, X3, X2, X1, [[N1,N2,N3,N4]|PS] ) :-
    N1 =\= 0,
    P1 is N1*1000 + N2*100 + N3*10 + N4,
    member( P1, X4 ),
    get_prime_runs( NS, X4, X3, X2, X1, PS ).
get_prime_runs( [N1,N2,N3|NS], X4, X3, X2, X1, [[N1,N2,N3]|PS] ) :-
    N1 =\= 0,
    P1 is N1*100 + N2*10 + N3,
    member( P1, X3 ),
    get_prime_runs( NS, X4, X3, X2, X1, PS ).
get_prime_runs( [N1,N2|NS], X4, X3, X2, X1, [[N1,N2]|PS] ) :-
    N1 =\= 0,
    P1 is N1*10 + N2,
    member( P1, X2 ),
    get_prime_runs( NS, X4, X3, X2, X1, PS ).
get_prime_runs( [N1|NS], X4, X3, X2, X1, [[N1]|PS] ) :-
    N1 =\= 0,
    N1 =\= 1,
    member( N1, X1 ),
    get_prime_runs( NS, X4, X3, X2, X1, PS ).

all_l4_primes( PS ) :-
    % gives a hardcoded list of all primes with distinct digits in range 1000..9999
    PS = [1039, 1049, 1063, 1069, 1087, 1093, 1097, 1237, 1249, 1259, 1279, 1283, 1289, 1297, 1307, 1327, 1367, 1409, 1423, 1427, 1429, 1439, 1453, 1459, 1483, 1487, 1489, 1493, 1523, 1543, 1549, 1567, 1579, 1583, 1597, 1607, 1609, 1627, 1637, 1657, 1693, 1697, 1709, 1723, 1753, 1759, 1783, 1789, 1823, 1847, 1867, 1873, 1879, 1907, 1973, 1987, 2017, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2137, 2143, 2153, 2179, 2309, 2341, 2347, 2351, 2357, 2371, 2381, 2389, 2417, 2437, 2459, 2467, 2473, 2503, 2531, 2539, 2543, 2549, 2579, 2591, 2593, 2609, 2617, 2647, 2657, 2659, 2671, 2683, 2687, 2689, 2693, 2713, 2719, 2731, 2741, 2749, 2753, 2789, 2791, 2801, 2803, 2819, 2837, 2843, 2851, 2857, 2861, 2879, 2897, 2903, 2917, 2953, 2957, 2963, 2971, 3019, 3041, 3049, 3061, 3067, 3079, 3089, 3109, 3167, 3169, 3187, 3209, 3217, 3251, 3257, 3259, 3271, 3407, 3457, 3461, 3467, 3469, 3491, 3517, 3527, 3529, 3541, 3547, 3571, 3581, 3607, 3617, 3659, 3671, 3691, 3697, 3701, 3709, 3719, 3761, 3769, 3821, 3847, 3851, 3907, 3917, 3947, 3967, 4013, 4019, 4021, 4027, 4051, 4057, 4073, 4079, 4091, 4093, 4127, 4129, 4139, 4153, 4157, 4159, 4201, 4217, 4219, 4231, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4357, 4391, 4397, 4507, 4513, 4517, 4519, 4523, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4651, 4657, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4751, 4759, 4783, 4789, 4793, 4801, 4813, 4817, 4831, 4861, 4871, 4903, 4931, 4937, 4951, 4957, 4967, 4973, 4987, 5021, 5023, 5039, 5081, 5087, 5107, 5147, 5167, 5179, 5189, 5197, 5209, 5231, 5237, 5261, 5273, 5279, 5281, 5297, 5309, 5347, 5381, 5387, 5407, 5413, 5417, 5419, 5431, 5437, 5471, 5479, 5483, 5623, 5639, 5641, 5647, 5683, 5689, 5693, 5701, 5741, 5743, 5749, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5861, 5867, 5869, 5879, 5897, 5903, 5923, 5927, 5981, 5987, 6029, 6037, 6043, 6047, 6053, 6073, 6079, 6089, 6091, 6143, 6173, 6197, 6203, 6217, 6247, 6257, 6271, 6287, 6301, 6317, 6329, 6359, 6379, 6389, 6397, 6421, 6427, 6451, 6473, 6481, 6491, 6521, 6529, 6547, 6571, 6581, 6701, 6703, 6709, 6719, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6841, 6857, 6871, 6907, 6917, 6947, 6971, 6983, 7013, 7019, 7039, 7043, 7069, 7103, 7109, 7129, 7159, 7193, 7213, 7219, 7243, 7253, 7283, 7309, 7321, 7349, 7351, 7369, 7451, 7459, 7481, 7489, 7523, 7529, 7541, 7549, 7561, 7583, 7589, 7591, 7603, 7621, 7639, 7643, 7649, 7681, 7691, 7823, 7829, 7841, 7853, 7901, 7951, 7963, 8017, 8039, 8053, 8059, 8069, 8093, 8123, 8147, 8167, 8179, 8209, 8219, 8231, 8237, 8243, 8263, 8269, 8273, 8291, 8293, 8297, 8317, 8329, 8369, 8419, 8423, 8429, 8431, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8597, 8609, 8623, 8627, 8629, 8641, 8647, 8693, 8713, 8719, 8731, 8741, 8753, 8761, 8923, 8941, 8951, 8963, 8971, 9013, 9041, 9043, 9067, 9103, 9127, 9137, 9157, 9173, 9187, 9203, 9241, 9257, 9281, 9283, 9341, 9371, 9403, 9413, 9421, 9431, 9437, 9461, 9463, 9467, 9473, 9521, 9547, 9587, 9601, 9613, 9623, 9631, 9643, 9721, 9743, 9781, 9803, 9817, 9851, 9857, 9871].

all_l3_primes( PS ) :-
    % gives a hardcoded list of all primes with distinct digits in range 100..999
    PS = [103, 107, 109, 127, 137, 139, 149, 157, 163, 167, 173, 179, 193, 197, 239, 241, 251, 257, 263, 269, 271, 281, 283, 293, 307, 317, 347, 349, 359, 367, 379, 389, 397, 401, 409, 419, 421, 431, 439, 457, 461, 463, 467, 479, 487, 491, 503, 509, 521, 523, 541, 547, 563, 569, 571, 587, 593, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 673, 683, 691, 701, 709, 719, 739, 743, 751, 761, 769, 809, 821, 823, 827, 829, 839, 853, 857, 859, 863, 907, 937, 941, 947, 953, 967, 971, 983].

all_l2_primes( PS ) :-
    % gives a hardcoded list of all primes with distinct digits in range 10..99
    PS = [13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97].

all_l1_primes( PS ) :-
    % gives a hardcoded list of all primes with distinct digits in range 1..9
    PS = [2, 3, 5, 7].

make_lol( [], [] ).
make_lol( [H|T], [DS|W] ) :-
    digits( H, DS ), 
    make_lol( T, W ).

digits( N, [N] ) :-
    N < 10.
digits( N, W ) :-
    N >= 10,
    div_mod(N, 10, D, M),
    digits( D, R ),
    append( R, [M], W ).

div_mod( A, B, D, M ) :-
    D is A div B,
    M is A mod B.

tester4( X ) :-
    lols_to_nums( X, NS ),
    sort( NS, [_|SX2] ),
    reverse( SX2, DX2 ),
    nums_to_big_list( DX2, BL ),
    to_big_num( BL, BN ),
    digits( BN, BND ),
    all_cubes( CS ),
    makes_cube_runs( BND, CS ).

all_cubes( CS ) :-
    % gives hardcoded list of all cubes with distinct digits in range 1..9999
    CS = [1, 8, 27, 64, 125, 216, 512, 729, 1728, 2197, 4096, 4913, 5832, 6859, 9261].

lols_to_nums( [], [] ).
lols_to_nums( [H|T], [N|NS] ) :-
    to_number( H, N ),
    lols_to_nums( T, NS ).

to_number( [], 0 ).
to_number( [H|T], N ) :-
    length( T, L ),
    N1 is H*10^L,
    to_number( T, N2 ),
    N is N1 + N2.

nums_to_big_list( [], [] ).
nums_to_big_list( [H|T], R ) :-
    digits( H, DS ),
    nums_to_big_list( T, R1 ),
    append(DS, R1, R).

to_big_num( L, R ) :-
    to_big_num( L, 0, R ).
to_big_num( [], N, N ).
to_big_num( [N1|NS], C, BN ) :-
    C1 is C*10 + N1,
    to_big_num( NS, C1, BN ).

makes_cube_runs( [], _ ).
makes_cube_runs( [N1,N2,N3,N4|NS], CS ) :-
    N1 =\= 0,
    to_big_num( [N1,N2,N3,N4], N ),
    member( N, CS ),
    makes_cube_runs( NS, CS ).
makes_cube_runs( [N1,N2,N3|NS], CS ) :-
    N1 =\= 0,
    to_big_num( [N1,N2,N3], N ),
    member( N, CS ),
    makes_cube_runs( NS, CS ).
makes_cube_runs( [N1,N2|NS], CS ) :-
    N1 =\= 0,
    to_big_num( [N1,N2], N ),
    member( N, CS ),
    makes_cube_runs( NS, CS ).
makes_cube_runs( [N1|NS], CS ) :-
    N1 =\= 0,
    to_big_num( [N1], N ),
    member( N, CS ),
    makes_cube_runs( NS, CS ).
makes_cube_runs( [N1], CS ) :-
    N1 =\= 0,
    member( N1, CS ).

x_generator4( N ) :-
x_generator4_loop(
	[ [[9,6,7],[4,0,1],[2,8,3],[5]]
	, [[9,8,3],[6,0,1],[5],[4,7],[2]]
	, [[9,8,3],[6,7],[4,2,0,1],[5]]
	, [[9,8,5,1],[2],[4,3],[6,0,7]]
	, [[9,8,5,1],[2],[3],[6,0,4,7]]
	, [[9,8,5,1],[2],[7],[4,6,0,3]]
	, [[8,9],[7],[6,0,1],[2,5,4,3]]
	, [[8,9],[7],[5,6,3],[4,0,2,1]]
	, [[8,9],[5],[4,7],[6,0,1],[3],[2]]
	, [[3],[5],[6,0,7],[2],[4,1],[8,9]]], 0 , N ).
x_generator4_loop( [] , C , C ).
x_generator4_loop( [T|TS] , C , N ) :-
	generator4( T ),
	C1 is C + 1,
	x_generator4_loop( TS , C1 , N ).
x_generator4_loop( [_|TS] , C , N ) :-
	x_generator4_loop( TS , C , N ).

x_tester4( N ) :-
x_tester4_loop(
	[ [[8 ,2 ,7] ,[6 ,1] ,[5 ,3] ,[4 ,0 ,9]]
	, [[8 ,2 ,7] ,[6 ,1] ,[4 ,0 ,9] ,[5 ,3]]
	, [[8 ,2 ,7] ,[5 ,3] ,[6 ,1] ,[4 ,0 ,9]]
	, [[8 ,2 ,7] ,[4 ,0 ,9] ,[6 ,1] ,[5 ,3]]
	, [[6 ,1] ,[8 ,2 ,7] ,[4 ,0 ,9] ,[5 ,3]]
	, [[6 ,1] ,[4 ,0 ,9] ,[5 ,3] ,[8 ,2 ,7]]
	, [[5 ,3] ,[6 ,1] ,[4 ,0 ,9] ,[8 ,2 ,7]]
	, [[5 ,3] ,[4 ,0 ,9] ,[6 ,1] ,[8 ,2 ,7]]
	, [[4 ,0 ,9] ,[5 ,3] ,[8 ,2 ,7] ,[6 ,1]]
	, [[4 ,0 ,9] ,[8 ,2 ,7] ,[6 ,1] ,[5 ,3]] ] , 0 , N ).
x_tester4_loop( [] , C , C ).
x_tester4_loop( [T|TS] , C , N ) :-
	tester4( T ),
	C1 is C + 1,
	x_tester4_loop( TS , C1 , N ).
x_tester4_loop( [_|TS] , C , N ) :-
	x_tester4_loop( TS , C , N ).

% in development this took ~90 seconds to evaluate
main :-
    generator4( X ), tester4( X ), write( X ).
